// <auto-generated />
using System;
using AutoRepairCRM.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoRepairCRM.Database.Migrations
{
    [DbContext(typeof(AutoRepairCrmDbContext))]
    partial class AutoRepairCrmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Make = "BMW",
                            Model = "F82",
                            Year = "2014 - 2019"
                        },
                        new
                        {
                            Id = 2,
                            Make = "BMW",
                            Model = "G30",
                            Year = "2016 – 2023"
                        },
                        new
                        {
                            Id = 3,
                            Make = "BMW",
                            Model = "E46",
                            Year = "1997 – 2006"
                        },
                        new
                        {
                            Id = 4,
                            Make = "Mercedes",
                            Model = "W212",
                            Year = "2010 – 2016"
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "MockUser2"
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.CustomerCar", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EngineLitre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("CustomersCars");

                    b.HasData(
                        new
                        {
                            CarId = 2,
                            CustomerId = 1,
                            EngineLitre = "3.0L",
                            FuelTypeId = 1,
                            LicensePlate = "В 5487 СМ"
                        },
                        new
                        {
                            CarId = 3,
                            CustomerId = 1,
                            EngineLitre = "2.5L",
                            FuelTypeId = 2,
                            LicensePlate = "В 8866 ТМ"
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BonusPercent")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BonusPercent = 5,
                            IsActive = true,
                            Salary = 850.0m,
                            UserId = "MockUser3"
                        },
                        new
                        {
                            Id = 2,
                            BonusPercent = 0,
                            IsActive = true,
                            Salary = 1100.0m,
                            UserId = "MockUser4"
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Petrol"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electric"
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("CarId", "CustomerId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 2,
                            CustomerId = 1,
                            DateEnded = new DateTime(2022, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStarted = new DateTime(2022, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFinished = true,
                            Price = 1800.00m,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            CustomerId = 1,
                            DateStarted = new DateTime(2021, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFinished = false,
                            ServiceTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CarId = 2,
                            CustomerId = 1,
                            DateEnded = new DateTime(2022, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStarted = new DateTime(2022, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFinished = true,
                            Price = 2500.23m,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CarId = 3,
                            CustomerId = 1,
                            DateEnded = new DateTime(2022, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStarted = new DateTime(2022, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFinished = true,
                            Price = 1000.10m,
                            ServiceTypeId = 3
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.ServiceEmployee", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ServicesEmployees");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            EmployeeId = 1
                        },
                        new
                        {
                            ServiceId = 2,
                            EmployeeId = 1
                        },
                        new
                        {
                            ServiceId = 3,
                            EmployeeId = 1
                        },
                        new
                        {
                            ServiceId = 4,
                            EmployeeId = 1
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Engine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suspension"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drivetrain"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "MockRole1",
                            ConcurrencyStamp = "cd0820b3-a399-4a8c-8b5c-49923f328635",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "MockRole3",
                            ConcurrencyStamp = "f8f92c0d-26ba-4210-8399-75ae62e76d99",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "MockRole4",
                            ConcurrencyStamp = "63ef8119-94ab-4e78-a48b-b0b989dfac1a",
                            Name = "OfficeEmployee",
                            NormalizedName = "OFFICEEMPLOYEE"
                        },
                        new
                        {
                            Id = "MockRole5",
                            ConcurrencyStamp = "25a43118-a6b8-4b33-9e60-6eea19a48503",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "MockUser1",
                            RoleId = "MockRole3"
                        },
                        new
                        {
                            UserId = "MockUser2",
                            RoleId = "MockRole1"
                        },
                        new
                        {
                            UserId = "MockUser3",
                            RoleId = "MockRole5"
                        },
                        new
                        {
                            UserId = "MockUser4",
                            RoleId = "MockRole4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Account.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "MockUser2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87b27028-bd03-4756-a559-0b9afc8b6808",
                            Email = "customer@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@ABV.BG",
                            NormalizedUserName = "CUSTOMER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDlxqm9kFSGVv+b3gtP2jEAI9KMyleiAMxttCh84dEw7Abq2X+NCL1wc8/GMgZ802Q==",
                            PhoneNumber = "01234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09823bed-d106-4ac8-9f71-b23a836d1e0b",
                            TwoFactorEnabled = false,
                            UserName = "customer@abv.bg",
                            FirstName = "Customer",
                            IsActive = true,
                            IsFirstLogin = false,
                            LastName = "Customer"
                        },
                        new
                        {
                            Id = "MockUser1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e6c3143-2940-4011-928b-704430f7a224",
                            Email = "admin@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEFyb9pFh9fvizOQM90Z4e3377A/kXiLeDJIyGkEV/rN7qUH/2ZSPgWK2ElCAb8Hj3Q==",
                            PhoneNumber = "01234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "646ca329-b322-4299-94a4-ccd8c0676a63",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg",
                            FirstName = "Admin",
                            IsActive = true,
                            IsFirstLogin = false,
                            LastName = "Admin"
                        },
                        new
                        {
                            Id = "MockUser3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f302e6a-ddff-424a-83cd-6d165b03e862",
                            Email = "worker@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKER@ABV.BG",
                            NormalizedUserName = "WORKER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEJk4R9TlzJ3ds+UDqnGDyJLDA+LvPcqUiG9e3SzocELJFblLx32BDN2AImElm7a7lA==",
                            PhoneNumber = "01234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8b0f855-7dc8-4c28-9baa-66783d082319",
                            TwoFactorEnabled = false,
                            UserName = "worker@abv.bg",
                            FirstName = "Worker",
                            IsActive = true,
                            IsFirstLogin = false,
                            LastName = "WORKER"
                        },
                        new
                        {
                            Id = "MockUser4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee6cab10-b4b7-4f96-bb2b-bfd88a153e18",
                            Email = "office@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OFFICE@ABV.BG",
                            NormalizedUserName = "OFFICE@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEBs4e32XcQA82sXeJ+O4OD0AjSI/1raPUptQ1Y6uA5rWfa/LUCN9/D8BKrfedsK+eQ==",
                            PhoneNumber = "01234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80fc0b39-663b-47e9-acd2-03155b40a8a8",
                            TwoFactorEnabled = false,
                            UserName = "office@abv.bg",
                            FirstName = "Office",
                            IsActive = true,
                            IsFirstLogin = false,
                            LastName = "OFFICE"
                        });
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Customer", b =>
                {
                    b.HasOne("AutoRepairCRM.Database.Data.Models.Account.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.CustomerCar", b =>
                {
                    b.HasOne("AutoRepairCRM.Database.Data.Models.Car", "Car")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRepairCRM.Database.Data.Models.Customer", "Customer")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRepairCRM.Database.Data.Models.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Employee", b =>
                {
                    b.HasOne("AutoRepairCRM.Database.Data.Models.Account.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Service", b =>
                {
                    b.HasOne("AutoRepairCRM.Database.Data.Models.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRepairCRM.Database.Data.Models.CustomerCar", "CustomerCar")
                        .WithMany("Services")
                        .HasForeignKey("CarId", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerCar");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.ServiceEmployee", b =>
                {
                    b.HasOne("AutoRepairCRM.Database.Data.Models.Employee", "Employee")
                        .WithMany("ServicesEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRepairCRM.Database.Data.Models.Service", "Service")
                        .WithMany("ServicesEmployees")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Car", b =>
                {
                    b.Navigation("CustomerCars");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Customer", b =>
                {
                    b.Navigation("CustomerCars");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.CustomerCar", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Employee", b =>
                {
                    b.Navigation("ServicesEmployees");
                });

            modelBuilder.Entity("AutoRepairCRM.Database.Data.Models.Service", b =>
                {
                    b.Navigation("ServicesEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
